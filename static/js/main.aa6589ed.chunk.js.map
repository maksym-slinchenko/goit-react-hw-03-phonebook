{"version":3,"sources":["components/contacs-form/contact-form.js","components/contact-item/contact-item.js","components/contact-list/contact-list.js","components/filter/filter.js","App.js","reportWebVitals.js","index.js"],"names":["ContactForm","state","name","number","handleChange","e","preventDefault","currentTarget","value","setState","isFieldEmpty","alert","handleAddContacts","namesArray","props","contacts","map","c","toLowerCase","includes","i","indexOf","onCreateContacts","reset","type","this","onChange","onClick","Component","ContactItem","id","onRemove","ContactList","uuidv4","Filtre","onChangeFiter","target","App","filter","createContacts","prevState","removeContact","findIndex","splice","changeFilter","getFilterContacts","contact","primaryContacts","JSON","parse","localStorage","getItem","setItem","stringify","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.aa6589ed.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nexport default class ContactForm extends Component {\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n  };\r\n  // Изменение свойств\r\n  handleChange = e => {\r\n    e.preventDefault();\r\n    const { name, value } = e.currentTarget;\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  };\r\n  // проверка пустые поля или нет\r\n  isFieldEmpty = name => {\r\n    if (name === '') {\r\n      alert(`All fields must be completed`);\r\n      return true;\r\n    }\r\n  };\r\n\r\n  // Добавление нового контатка в список\r\n  handleAddContacts = e => {\r\n    e.preventDefault();\r\n    if (\r\n      this.isFieldEmpty(this.state.name) ||\r\n      this.isFieldEmpty(this.state.number)\r\n    ) {\r\n      return;\r\n    }\r\n    const namesArray = this.props.contacts.map(c => c.name.toLowerCase());\r\n    if (namesArray.includes(this.state.name.toLowerCase())) {\r\n      const i = namesArray.indexOf(this.state.name.toLowerCase());\r\n      alert(`\"${this.props.contacts[i].name}\" is already in contacts`);\r\n      return;\r\n    }\r\n\r\n    this.props.onCreateContacts(this.state.name, this.state.number);\r\n    this.reset();\r\n  };\r\n\r\n  // Обнуление значений формы\r\n  reset = () =>\r\n    this.setState({\r\n      name: '',\r\n      number: '',\r\n    });\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <form>\r\n          <label>\r\n            Name\r\n            <input\r\n              name=\"name\"\r\n              type=\"text\"\r\n              value={this.state.name}\r\n              onChange={this.handleChange}\r\n            />\r\n          </label>\r\n          <label>\r\n            Number\r\n            <input\r\n              name=\"number\"\r\n              type=\"tel\"\r\n              value={this.state.number}\r\n              onChange={this.handleChange}\r\n            />\r\n          </label>\r\n          <button type=\"submit\" onClick={this.handleAddContacts}>\r\n            Add contact\r\n          </button>\r\n        </form>\r\n      </>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default function ContactItem({ name, number, id, onRemove }) {\r\n  return (\r\n    <>\r\n      <li key={id} name={name}>\r\n        {`${name}: ${number}`}\r\n        <button type=\"button\" onClick={() => onRemove(name)}>\r\n          Delete\r\n        </button>\r\n      </li>\r\n    </>\r\n  );\r\n}\r\n\r\nContactItem.propTypes = {\r\n  name: PropTypes.string,\r\n  number: PropTypes.string,\r\n  id: PropTypes.string,\r\n};\r\n","import React from 'react';\r\nimport ContactItem from '../contact-item/contact-item';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default function ContactList({ contacts, onRemove }) {\r\n  return (\r\n    <>\r\n      <ul>\r\n        {contacts.map(i => (\r\n          <ContactItem\r\n            name={i.name}\r\n            number={i.number}\r\n            onRemove={onRemove}\r\n            id={uuidv4()}\r\n          />\r\n        ))}\r\n      </ul>\r\n    </>\r\n  );\r\n}\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.array,\r\n  onRemove: PropTypes.func,\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default function Filtre({ value, onChangeFiter }) {\r\n  return (\r\n    <>\r\n      <label>\r\n        Find contacts by name\r\n        <input\r\n          name=\"filter\"\r\n          type=\"text\"\r\n          value={value}\r\n          onChange={e => onChangeFiter(e.target.value)}\r\n        />\r\n      </label>\r\n    </>\r\n  );\r\n}\r\n\r\nFiltre.propTypes = {\r\n  value: PropTypes.string,\r\n  onChangeFiter: PropTypes.func,\r\n};\r\n","import React, { Component } from 'react';\n\nimport ContactForm from './components/contacs-form/contact-form';\nimport ContactList from './components/contact-list/contact-list';\nimport Filter from './components/filter/filter';\n\nexport default class App extends Component {\n  state = {\n    contacts: [],\n    filter: '',\n  };\n\n  // Парсинг контактов в стэйт из локал сторэдж\n  componentDidMount() {\n    const primaryContacts = JSON.parse(localStorage.getItem('contacts'));\n    if (primaryContacts) {\n      this.setState({ contacts: primaryContacts });\n    }\n  }\n\n  // Запись контактов в Local Storage\n  componentDidUpdate(prevState) {\n    if (prevState.contacts !== this.state.contacts) {\n      localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n    }\n  }\n\n  // Создания контактов\n  createContacts = (name, number) => {\n    const prevState = this.state.contacts;\n    this.setState({\n      contacts: [\n        ...prevState,\n        {\n          name: name,\n          number: number,\n        },\n      ],\n    });\n  };\n\n  // Удаление контакта\n  removeContact = name => {\n    const { contacts } = this.state;\n    const i = contacts.findIndex(c => c.name === name);\n    contacts.splice(i, 1);\n    this.setState({\n      contacts: contacts,\n    });\n  };\n\n  // Фильтрация по имени\n  changeFilter = filter => {\n    this.setState({ filter });\n  };\n  // Возвращение отфильтрованного массива\n  getFilterContacts = () => {\n    const { contacts, filter } = this.state;\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase()),\n    );\n  };\n\n  render() {\n    return (\n      <>\n        <h1>Phonebook</h1>\n        <ContactForm\n          onCreateContacts={this.createContacts}\n          contacts={this.state.contacts}\n        />\n        <h2>Contacts</h2>\n        <Filter value={this.state.filter} onChangeFiter={this.changeFilter} />\n        <ContactList\n          contacts={this.getFilterContacts()}\n          onRemove={this.removeContact}\n        />\n      </>\n    );\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}